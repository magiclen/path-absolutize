name: CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  
jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - uses: actions-rust-lang/rustfmt@v1
      
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - run: cargo clippy --all-targets -- -D warnings
      - run: cargo clippy --all-targets --features once_cell_cache -- -D warnings
      - run: cargo clippy --all-targets --features lazy_static_cache -- -D warnings
      - run: cargo clippy --all-targets --features unsafe_cache -- -D warnings

  tests:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        toolchain:
          - stable
          - nightly
        features:
          -
          - --features lazy_static_cache
          - --features once_cell_cache
          - --features unsafe_cache
    name: Test ${{ matrix.toolchain }} on ${{ matrix.os }} (${{ matrix.features }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
      - run: cargo test ${{ matrix.features }}
      - run: cargo doc ${{ matrix.features }}

  MSRV:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        toolchain:
          - "1.60"
        features:
          -
          - --features lazy_static_cache
          - --features once_cell_cache
          - --features unsafe_cache
    name: Test ${{ matrix.toolchain }} on ${{ matrix.os }} (${{ matrix.features }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
      - run: cargo test --lib --bins ${{ matrix.features }}